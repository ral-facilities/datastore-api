name: CI
on:
  workflow_dispatch:
      inputs:
        push-docker-image-to-harbor:
          description: 'Push Docker Image to Harbor'
          required: false
          type: boolean
          default: false

  pull_request:
  push:
    tags:
      - 'v*'
    branches:
      - main

permissions:
  contents: read

jobs:
  tests:
    strategy:
      fail-fast: false
    runs-on: ubuntu-22.04
    env:
      CACHE_DIR: $HOME/.cache/docker

    name: Tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load Pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('.github/requirements.txt') }}

      - name: Install runner requirements
        run: pip install -r .github/requirements.txt

      # Let CodeCarbon run in the background while we do everything else
      - name: Start CodeCarbon
        run: codecarbon monitor --no-api
        timeout-minutes: 1

      # Do this early to minimise how long we wait for the health check later on
      - name: Docker compose up
        run: docker compose -f docker-compose.yaml --profile dependencies up -d

      - name: Touch coverage.xml
        run: touch coverage.xml

      - name: Make cachedir
        run: mkdir -p ${{ env.CACHE_DIR }}

      - name: Set X509 certificate
        run: |
          echo "$X509_USER_CERT" > hostcert.pem;
          echo "$X509_USER_KEY" > hostkey.pem;
          chmod 600 hostkey.pem;
        env:
          X509_USER_CERT: ${{ secrets.FTS3_HOSTCERT }}
          X509_USER_KEY: ${{ secrets.FTS3_HOSTKEY }}

      - name: Wait for ICAT container to start
        run: |
          until docker ps --filter "name=icat_payara_container" --format "{{.Status}}" | grep -q "(healthy)"; do
            sleep 1
          done
        timeout-minutes: 3

      - name: Log container status
        run: docker ps

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache image will only be updated if poetry.lock changes
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_DIR }}
          key: ${{ runner.os }}-buildx-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: datastore-api:dev
          target: dev
          load: true
          cache-from: type=local,src=${{ env.CACHE_DIR }}
          cache-to: type=local,dest=${{ env.CACHE_DIR }},mode=max

      - name: Run tests
        run: |
          docker compose -f docker-compose.yaml --profile tests run \
            -e FTS3__STORAGE_ENDPOINTS__ECHO__ACCESS_KEY=${{ secrets.ECHO_S3_ACCESS_KEY }} \
            -e FTS3__STORAGE_ENDPOINTS__ECHO__SECRET_KEY=${{ secrets.ECHO_S3_SECRET_KEY }} \
            tests
      
      - name: Docker compose down
        run: docker compose -f tests/docker-compose.yaml down
      
      - name: Upload code coverage report
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: list Cache
        run: ls -l ${{ env.CACHE_DIR }}

      # CodeCarbon needs the keyboard interrupt signal to gracefully stop
      - name: Stop CodeCarbon
        if: success() || failure()
        run: pkill -2 codecarbon

      - name: Wait for flush
        if: success() || failure()
        run: |
          until ! pgrep codecarbon; do
            sleep 1
          done
        timeout-minutes: 1

      - name: Print emissions
        if: success() || failure()
        run: cat emissions.csv


  linting:
    runs-on: ubuntu-22.04
    env:
      CACHE_DIR: $HOME/.cache/docker
    name: Code Linting
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache image will only be updated if poetry.lock changes
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_DIR }}
          key: ${{ runner.os }}-buildx-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: datastore-api:dev
          target: dev
          load: true
          cache-from: type=local,src=${{ env.CACHE_DIR }}
          cache-to: type=local,dest=${{ env.CACHE_DIR }},mode=max

      - name: Run linting
        run: docker compose -f docker-compose.yaml run lint


  formatting:
    runs-on: ubuntu-22.04
    env:
      CACHE_DIR: $HOME/.cache/docker
    name: Code Formatting
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache image will only be updated if poetry.lock changes
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_DIR }}
          key: ${{ runner.os }}-buildx-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: datastore-api:dev
          target: dev
          load: true
          cache-from: type=local,src=${{ env.CACHE_DIR }}
          cache-to: type=local,dest=${{ env.CACHE_DIR }},mode=max

      - name: Run formatting
        run: docker compose -f docker-compose.yaml run format


  safety:
    runs-on: ubuntu-22.04
    env:
      CACHE_DIR: $HOME/.cache/docker
    name: Dependency Safety
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache image will only be updated if poetry.lock changes
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_DIR }}
          key: ${{ runner.os }}-buildx-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: datastore-api:dev
          target: dev
          load: true
          cache-from: type=local,src=${{ env.CACHE_DIR }}
          cache-to: type=local,dest=${{ env.CACHE_DIR }},mode=max

      - name: Run safety
        run: docker compose -f docker-compose.yaml run safety

  build:
    needs: [ tests, linting, formatting, safety]
    runs-on: ubuntu-22.04
    env:
      PUSH_DOCKER_IMAGE_TO_HARBOR: ${{ (github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/') || (inputs.push-docker-image-to-harbor) && 'true' || 'false' }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Docker compose up
        run: docker compose -f tests/docker-compose.yaml up -d

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.HARBOR_URL }}/datastore-api

      - name: Login to Harbor registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.HARBOR_URL }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}
      
      - name: ${{ fromJSON(env.PUSH_DOCKER_IMAGE_TO_HARBOR) && 'Build and push Docker image to Harbor' || 'Build Docker image' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ fromJSON(env.PUSH_DOCKER_IMAGE_TO_HARBOR) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: prod

      - name: Run Docker image
        run: |
          docker run -d -p 8000:8000 \
            --network tests_datastore_network \
            -v /home/runner/work/datastore-api/datastore-api/hostkey.pem:/app/hostkey.pem \
            -v /home/runner/work/datastore-api/datastore-api/hostcert.pem:/app/hostcert.pem \
            -w /app \
            -e FTS3__STORAGE_ENDPOINTS__ECHO__ACCESS_KEY=${{ secrets.ECHO_S3_ACCESS_KEY }} \
            -e FTS3__STORAGE_ENDPOINTS__ECHO__SECRET_KEY=${{ secrets.ECHO_S3_SECRET_KEY }} \
            ${{ steps.meta.outputs.tags }}

      - name: Wait for Datastore API to start
        run: sleep 5

      - name: Check if Datastore API is up
        run: |
          if [ "$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8000/version)" == "200" ]; then
            echo "Datastore API is up and running"
          else
            echo "Datastore API not reachable"
            exit 1
          fi

      - name: Docker compose down
        run: docker stop $(docker ps -a -q)
        
