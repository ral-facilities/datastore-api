name: CI
on:
  workflow_dispatch:
      inputs:
        push-docker-image-to-harbor:
          description: 'Push Docker Image to Harbor'
          required: false
          type: boolean
          default: false

  pull_request:
  push:
    tags:
      - 'v*'
    branches:
      - main

permissions:
  contents: read

jobs:
  tests:
    strategy:
      fail-fast: false
    runs-on: ubuntu-22.04

    name: Tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Do this early to minimise how long we wait for the health check later on
      - name: Docker compose up
        run: docker compose -f tests/docker-compose.yaml up -d

      - name: Install python-ldap dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsasl2-dev python3.11-dev libldap2-dev libssl-dev

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Load Pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('.github/requirements.txt') }}

      - name: Install Poetry & Nox
        run: pip install -r .github/requirements.txt

      - name: Load Poetry cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: poetry-${{ hashFiles('poetry.lock') }}

      - name: Load Poetry cache for Nox tests session
        uses: actions/cache@v4
        with:
          path: /home/runner/work/datastore-api/datastore-api/.nox/tests*
          key: nox-tests-${{ hashFiles('poetry.lock') }}

      - name: Set X509 certificate
        run: |
          echo "$X509_USER_CERT" > hostcert.pem;
          echo "$X509_USER_KEY" > hostkey.pem;
          chmod 600 hostkey.pem;
        env:
          X509_USER_CERT: ${{ secrets.FTS3_HOSTCERT }}
          X509_USER_KEY: ${{ secrets.FTS3_HOSTKEY }}

      - name: Wait for ICAT container to start
        run: |
          until docker ps --filter "name=icat_payara_container" --format "{{.Status}}" | grep -q "(healthy)"; do
            sleep 1
          done
        timeout-minutes: 3

      - name: Log container status
        run: docker ps

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Run tests via Docker container
        run: |
          docker build -t datastore-api:test --target test -f /home/runner/work/datastore-api/datastore-api/Dockerfile .
          docker run --rm \
            --network tests_datastore_network \
            -v /home/runner/work/datastore-api/datastore-api//hostkey.pem:/app/hostkey.pem \
            -v /home/runner/work/datastore-api/datastore-api//hostcert.pem:/app/hostcert.pem \
            -w /app \
            -e FTS3__STORAGE_ENDPOINTS__ECHO__ACCESS_KEY=${{ secrets.ECHO_S3_ACCESS_KEY }} \
            -e FTS3__STORAGE_ENDPOINTS__ECHO__SECRET_KEY=${{ secrets.ECHO_S3_SECRET_KEY }} \
            datastore-api:test

      - name: Cache docker layers
        uses: actions/cache@v4
        env:
          cache-name: cache-docker-layers
        with:
          path: ~/.cache/docker
          key: ${{ runner.os }}-build-${{ github.sha }}
      
      - name: Docker compose down
        run: docker compose -f tests/docker-compose.yaml down
      
      - name: Upload code coverage report
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}


  linting:
    runs-on: ubuntu-22.04
    name: Code Linting
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Load Pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('.github/requirements.txt') }}

      - name: Install Poetry & Nox
        run: pip install -r .github/requirements.txt

      - name: Load Poetry cache for Nox lint session
        uses: actions/cache@v4
        with:
          path: /home/runner/work/datastore-api/datastore-api/.nox/lint*
          key: nox-lint-${{ hashFiles('poetry.lock') }}

      - name: Run Nox lint session
        run: nox -s lint


  formatting:
    runs-on: ubuntu-22.04
    name: Code Formatting
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load Pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('.github/requirements.txt') }}
      - name: Install Poetry & Nox
        run: pip install -r .github/requirements.txt

      - name: Load Poetry cache for Nox black session
        uses: actions/cache@v4
        with:
          path: /home/runner/work/datastore-api/datastore-api/.nox/black*
          key: nox-black-${{ hashFiles('poetry.lock') }}

      - name: Run Nox black session
        run: nox -s black -- --check datastore_api tests noxfile.py


  safety:
    runs-on: ubuntu-22.04
    name: Dependency Safety
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Load Pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('.github/requirements.txt') }}

      - name: Install Poetry & Nox
        run: pip install -r .github/requirements.txt

      - name: Load Poetry cache for Nox safety session
        uses: actions/cache@v4
        with:
          path: /home/runner/work/datastore-api/datastore-api/.nox/safety*
          key: nox-safety-${{ hashFiles('poetry.lock') }}

      - name: Run Nox safety session
        run: nox -s safety

  build:
    needs: [ tests, linting, formatting, safety]
    runs-on: ubuntu-22.04
    env:
      PUSH_DOCKER_IMAGE_TO_HARBOR: ${{ (github.ref == 'refs/heads/main') || (inputs.push-docker-image-to-harbor) && 'true' || 'false' }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Docker compose up
        run: docker compose -f tests/docker-compose.yaml up -d

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.HARBOR_URL }}/datastore-api

      - name: Login to Harbor registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.HARBOR_URL }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}
      
      - name: ${{ fromJSON(env.PUSH_DOCKER_IMAGE_TO_HARBOR) && 'Build and push Docker image to Harbor' || 'Build Docker image' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ fromJSON(env.PUSH_DOCKER_IMAGE_TO_HARBOR) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: prod

      - name: Run Docker image
        run: |
          docker run -d -p 8000:8000 \
            --network tests_datastore_network \
            -v /home/runner/work/datastore-api/datastore-api/hostkey.pem:/app/hostkey.pem \
            -v /home/runner/work/datastore-api/datastore-api/hostcert.pem:/app/hostcert.pem \
            -w /app \
            -e FTS3__STORAGE_ENDPOINTS__ECHO__ACCESS_KEY=${{ secrets.ECHO_S3_ACCESS_KEY }} \
            -e FTS3__STORAGE_ENDPOINTS__ECHO__SECRET_KEY=${{ secrets.ECHO_S3_SECRET_KEY }} \
            ${{ steps.meta.outputs.tags }}

      - name: Wait for Datastore API to start
        run: sleep 5

      - name: Check if Datastore API is up
        run: |
          if [ "$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8000/version)" == "200" ]; then
            echo "Datastore API is up and running"
          else
            echo "Datastore API not reachable"
            exit 1
          fi

      - name: Docker compose down
        run: docker stop $(docker ps -a -q)
        
